#Configuration
name: train_FourierISP
model_type: FcolorDualModel
scale: 1
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0
find_unused_parameters: true

# dataset and data loader settings
datasets:
  train:
    name: ZRRTrain
    type: RAWDualImageDataset #PairedImageDataset
    dataroot_gt: /path/data/Zurich-RAW-to-DSLR-Dataset/train/canon
    dataroot_lq: /path/data/Zurich-RAW-to-DSLR-Dataset/train/huawei_raw
    filename_tmpl: '{}'
    io_backend:
      type: disk
      # (for lmdb)
      # type: lmdb

    # gt_size: 224
    use_hflip: true
    use_rot: true

    # data loader

#    num_worker_per_gpu: 1
#    batch_size_per_gpu: 2
#    dataset_enlarge_ratio: 1
#    prefetch_mode: ~
    num_worker_per_gpu: 6
    batch_size_per_gpu: 2
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: ZRRTest
    type: RAWDualImageDataset #PairedImageDataset
    dataroot_gt: /path/data/Zurich-RAW-to-DSLR-Dataset/test/canon
    dataroot_lq: /path/data/Zurich-RAW-to-DSLR-Dataset/test/huawei_raw

    io_backend:
      type: disk

# network structures
network_g:
  type: FourierISP
  wf: 24
  in_chn: 3
  depth: 4
  relu_slope: 0.2

# path
path:
  pretrain_network_g: ~ #
  strict_load_g: false
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  gclip: -4
  scheduler:
    type: MultiStepLR
    milestones: [150000, 250000, 350000, 450000]
    gamma: 0.5
  
  # scheduler:
  #   type: CosineAnnealingRestartLR
  #   periods: [250000, 250000,250000,250000]
  #   restart_weights: [1, 1, 1, 1]
  #   eta_min: !!float 1e-7
  total_iter: 500000
  # warmup_iter: 5000  # no warm up

  # total_iter: 500000
  # warmup_iter: 5000  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
  vgg_opt:
    type: VGGLoss
    loss_weight: 1.0
    reduction: mean
  fft_opt:
    type: FFTV10Loss
    loss_weight: 0.1
    reduction: mean

  ssim_opt:
    type: SSIMLoss
    loss_weight: 0.5
    reduction: mean

val:
  val_freq: !!float 1e4
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim: # metric name, can be arbitrary
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 1000
  save_checkpoint_freq: !!float 1e4
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500

#python basicsr/train.py -opt options/train/FourierISP/train_FourierISP.yml